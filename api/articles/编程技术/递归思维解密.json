{"title":"递归思维解密","slug":"编程技术/递归思维解密","date":"2023-03-15T12:33:36.000Z","updated":"2025-08-08T16:40:49.056Z","comments":false,"path":"api/articles/编程技术/递归思维解密.json","photos":[],"excerpt":"像剥洋葱般解构递归的核心原理","covers":null,"content":"<p>递归是编程中的核心概念，本质是<strong>自我调用的艺术</strong>。当函数直接或间接调用自身时，就形成了递归结构。其关键在于：</p>\n<ol>\n<li><strong>基线条件</strong> - 递归终止的临界点</li>\n<li><strong>递归条件</strong> - 问题规模的递减规则</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib</span>(<span class=\"hljs-params\">n</span>):<br>    <span class=\"hljs-keyword\">if</span> n &lt;= <span class=\"hljs-number\">1</span>:\t<span class=\"hljs-comment\">#基线条件</span><br>        <span class=\"hljs-keyword\">return</span> n<br>    <span class=\"hljs-keyword\">return</span> fib(n-<span class=\"hljs-number\">1</span>) + fib(n-<span class=\"hljs-number\">2</span>)\t<span class=\"hljs-comment\">#递归条件</span><br></code></pre></td></tr></table></figure></div>\n\n","categories":[{"name":"编程技术","slug":"编程技术","count":2,"path":"api/categories/编程技术.json"}],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"},{"name":"递归","slug":"递归","count":1,"path":"api/tags/递归.json"}]}